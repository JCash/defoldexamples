function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.mask_pred = render.predicate({"screenfade"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.stencil_mask_enabled = true
	self.zoom = 1

    self.view = vmath.matrix4()
end

function update(self)
    render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    local original_width = render.get_width()
    local original_height = render.get_height()
    local current_width = render.get_window_width()
    local current_height = render.get_window_height()
    
    render.set_viewport(0, 0, current_width, current_height)
    render.set_view(self.view)
    
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)

	local width = render.get_width()*self.zoom
	local height = render.get_height()*self.zoom
	render.set_projection(vmath.matrix4_orthographic(0, width, 0, height, -1, 1))

	if self.stencil_mask_enabled then
		-- Using the simple trick from Sven's post here: https://forum.defold.com/t/making-a-flashlight/286/3
		-- 1. We need to disable color drawing while rendering the mask
	    render.set_color_mask(false, false, false, false)
	    
	    -- 2. Enable stencil test and setup stencil mask parameters
	    render.enable_state(render.STATE_STENCIL_TEST)
	    render.set_stencil_func(render.COMPARE_FUNC_ALWAYS, 1, 255)
	    render.set_stencil_op(render.STENCIL_OP_KEEP, render.STENCIL_OP_KEEP, render.STENCIL_OP_REPLACE)
	    render.set_stencil_mask(255)
	    
	    -- 3. Draw the mask
	    render.set_view(vmath.matrix4())
        render.set_projection(vmath.matrix4())
	    render.draw(self.mask_pred)
		
	    -- 4. Update the stencil function to only let pixel pass that are equal to the mask result
	    render.set_stencil_func(render.COMPARE_FUNC_EQUAL, 1, 255)
		
	    -- 5. Re-enable color drawing
	    render.set_color_mask(true, true, true, true)
	end
	
    -- 6. Continue as rendering usual! :)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    
    -- center (and zoom out if needed)
    local zoom_factor = math.min(math.min(current_width / original_width, current_height / original_height), 1) / self.zoom
    local projected_width = current_width / zoom_factor
    local projected_height = current_height / zoom_factor


    render.set_projection(vmath.matrix4_orthographic(0, projected_width, 0, projected_height, -1, 1))
    
    -- Render the scene
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, width, 0, height, -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    elseif message_id == hash("disable_stencil_mask") then
        self.stencil_mask_enabled = false
    elseif message_id == hash("enable_stencil_mask") then
        self.stencil_mask_enabled = true
    elseif message_id == hash("zoom") then
        self.zoom = message.zoom
    end
end

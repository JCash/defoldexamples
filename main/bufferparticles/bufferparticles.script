
local system = require("main/bufferparticles/particles_simple")

local num_particles = 1000

-- draws the white dots where the actual position is
local function draw_particles_debug(self, particles)
    local color = vmath.vector4(1, 1, 1, 1)
    local offset = vmath.vector3(1, 1, 0)
    for k, p in pairs(particles) do
        msg.post("@render:", "draw_line", { start_point = p, end_point = p+offset, color = color } )
    end
end


local function clear_texture(self, color)
    for y=0,self.height-1 do
        for x=0,self.width-1 do
			local index = y * self.width * 3 + x * 3 + 1
			self.stream[index + 0] = color.x
			self.stream[index + 1] = color.y
			self.stream[index + 2] = color.z
        end
    end
end

local function draw_particles(self, particles)
    local color = vmath.vector4(1, 1, 1, 1)
    local offset = vmath.vector3(1, 1, 0)
    for k, p in pairs(particles) do
        local x = math.floor(p.x)
        local y = math.floor(p.y)
        local index = y * self.width * 3 + x * 3
        if index < 1 then
            index = 1
        end
        local color = self.colors[k]
        self.stream[index + 0] = color.x
        self.stream[index + 1] = color.y
        self.stream[index + 2] = color.z
    end
end


local function reinit(self)
    self.r = 255
    self.g = 127
    self.b = 64
    
    clear_texture(self, vmath.vector4(0,0,0,1))
    
    self.colors = {}
    
    system.init_particles(num_particles, self.width, self.height)
    
    local basecolor = 120
    particles = system.get_particles()
    for k, p in pairs(particles) do
        local r = basecolor + math.random() * (235 - basecolor)
        local g = basecolor + math.random() * (235 - basecolor)
        local b = basecolor + math.random() * (235 - basecolor)
        self.colors[k] = vmath.vector3(r, g, b) 
    end
    
end

function init(self)
    msg.post("#", "acquire_input_focus")
    msg.post("@render:", "zoom",        {zoom=1})
    msg.post("@render:", "clear_color", {color=vmath.vector4(0.5,0.5,0.5,1)})
    msg.post("@render:", "disable_stencil_mask")
    
    math.randomseed(0x123456)
    self.width = tonumber(sys.get_config("display.width", "800"))
    self.height = tonumber(sys.get_config("display.height", "600"))
    
    local logosize = 128
    local scale_width = self.width / logosize
    local scale_height = self.height / logosize
    go.set("#sprite", "scale", vmath.vector3(scale_width, scale_height, 1) )
    go.set(".", "position", vmath.vector3(self.width/2, self.height/2, 0))
    
    self.textureheader = {width=self.width,
                        height=self.height,
                        type=resource.TEXTURE_TYPE_2D,
                        format=resource.TEXTURE_FORMAT_RGB,
                        num_mip_maps=1 }

    self.buffer = buffer.create(self.width * self.height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
    self.stream = buffer.get_stream(self.buffer, hash("rgb"))

    reinit(self)
end

function update(self, dt)
    if self.buffer ~= nil then
	    local path = go.get("#sprite", "texture0")
	    resource.set_texture(path, self.textureheader, self.buffer)
	end

    system.update_particles(dt)
    particles = system.get_particles()
    
    -- render the particles using the texture buffer
    draw_particles(self, particles)

    draw_particles_debug(self, particles)
end

function on_input(self, action_id, action)
    if action_id == hash("key_space") and action.pressed then
        reinit(self)
    end
end
